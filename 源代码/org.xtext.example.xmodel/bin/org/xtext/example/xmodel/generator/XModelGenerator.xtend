/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.xmodel.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.example.xmodel.xModel.XClass
import org.xtext.example.xmodel.xModel.Operation;
import org.xtext.example.xmodel.xModel.Parameter;
import org.xtext.example.xmodel.xModel.Property;
import javax.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class XModelGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for (e : resource.allContents.toIterable.filter(XClass)) {  
            fsa.generateFile(
               e.fullyQualifiedName.toString("/") + ".java",e.compile)
        }
	}
	
	private def compile(XClass e) '''
	«IF e.eContainer.fullyQualifiedName !== null»
	    package «e.eContainer.fullyQualifiedName»;
	«ENDIF»
	
	public «IF e.isAbstract == true»abstract «ENDIF»class «e.name» «IF e.extend !== null»extends «e.extend»«ENDIF» {
	
	«IF e.description !== null»    //  «e.description»«ENDIF»
	
    «FOR f : e.property»
    	«f.compilePro»
    «ENDFOR»
    
    «FOR f : e.operation»
    	«f.compileOp»
    «ENDFOR»
	}
'''

	private def compilePro(Property f) '''
    «f.visibility» «f.xtype» «f.name»;«IF f.description !== null»  //  «f.description»«ENDIF»
        
    public «f.xtype» get«f.name.toFirstUpper»() {
        return «f.name»;
    }
        
    public void set«f.name.toFirstUpper»(«f.xtype» «f.name») {
        this.«f.name» = «f.name»;
    }
'''
	
	private def compileOp(Operation f) '''
		«IF f.description !== null»//  «f.description»«ENDIF»
		«f.visibility» «f.xtype» «f.name»(«FOR f1 : f.parameter»«IF f.parameter.last != f1»«f1.compilePa»,«ENDIF»«IF f.parameter.last == f1»«f1.compilePa»«ENDIF»«ENDFOR»){
		    // to do
		}
'''

	private def compilePa(Parameter f) '''«f.xtype» «f.name»'''
		
	
}
