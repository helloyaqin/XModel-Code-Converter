/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.xmodel.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.xmodel.services.XModelGrammarAccess;
import org.xtext.example.xmodel.xModel.Operation;
import org.xtext.example.xmodel.xModel.Property;
import org.xtext.example.xmodel.xModel.XClass;
import org.xtext.example.xmodel.xModel.XModelPackage;

@SuppressWarnings("all")
public class XModelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XModelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == XModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XModelPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case XModelPackage.PACKAGE:
				sequence_Package(context, (org.xtext.example.xmodel.xModel.Package) semanticObject); 
				return; 
			case XModelPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.example.xmodel.xModel.Parameter) semanticObject); 
				return; 
			case XModelPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case XModelPackage.XCLASS:
				sequence_XClass(context, (XClass) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (name=EString description=EString? visibility=Visibility? xtype=XType? (parameter+=Parameter parameter+=Parameter*)?)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (name=EString (class+=XClass class+=XClass*)?)
	 */
	protected void sequence_Package(ISerializationContext context, org.xtext.example.xmodel.xModel.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=EString xtype=XType?)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.example.xmodel.xModel.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=EString description=EString? visibility=Visibility? xtype=XType?)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XClass returns XClass
	 *
	 * Constraint:
	 *     (
	 *         isAbstract?='isAbstract'? 
	 *         name=EString 
	 *         description=EString? 
	 *         extend=EString? 
	 *         (property+=Property property+=Property*)? 
	 *         (operation+=Operation operation+=Operation*)?
	 *     )
	 */
	protected void sequence_XClass(ISerializationContext context, XClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
