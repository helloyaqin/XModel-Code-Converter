/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.xmodel.xModel.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.xmodel.xModel.Operation;
import org.xtext.example.xmodel.xModel.Parameter;
import org.xtext.example.xmodel.xModel.Property;
import org.xtext.example.xmodel.xModel.Visibility;
import org.xtext.example.xmodel.xModel.XClass;
import org.xtext.example.xmodel.xModel.XModelFactory;
import org.xtext.example.xmodel.xModel.XModelPackage;
import org.xtext.example.xmodel.xModel.XType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XModelFactoryImpl extends EFactoryImpl implements XModelFactory
{
  /**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public static XModelFactory init()
  {
		try {
			XModelFactory theXModelFactory = (XModelFactory)EPackage.Registry.INSTANCE.getEFactory(XModelPackage.eNS_URI);
			if (theXModelFactory != null) {
				return theXModelFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new XModelFactoryImpl();
	}

  /**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public XModelFactoryImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EObject create(EClass eClass)
  {
		switch (eClass.getClassifierID()) {
			case XModelPackage.PACKAGE: return createPackage();
			case XModelPackage.XCLASS: return createXClass();
			case XModelPackage.PROPERTY: return createProperty();
			case XModelPackage.OPERATION: return createOperation();
			case XModelPackage.PARAMETER: return createParameter();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
		switch (eDataType.getClassifierID()) {
			case XModelPackage.VISIBILITY:
				return createVisibilityFromString(eDataType, initialValue);
			case XModelPackage.XTYPE:
				return createXTypeFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
		switch (eDataType.getClassifierID()) {
			case XModelPackage.VISIBILITY:
				return convertVisibilityToString(eDataType, instanceValue);
			case XModelPackage.XTYPE:
				return convertXTypeToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public org.xtext.example.xmodel.xModel.Package createPackage()
  {
		PackageImpl package_ = new PackageImpl();
		return package_;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public XClass createXClass()
  {
		XClassImpl xClass = new XClassImpl();
		return xClass;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Property createProperty()
  {
		PropertyImpl property = new PropertyImpl();
		return property;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Operation createOperation()
  {
		OperationImpl operation = new OperationImpl();
		return operation;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Parameter createParameter()
  {
		ParameterImpl parameter = new ParameterImpl();
		return parameter;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Visibility createVisibilityFromString(EDataType eDataType, String initialValue)
  {
		Visibility result = Visibility.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertVisibilityToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public XType createXTypeFromString(EDataType eDataType, String initialValue)
  {
		XType result = XType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertXTypeToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public XModelPackage getXModelPackage()
  {
		return (XModelPackage)getEPackage();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
  @Deprecated
  public static XModelPackage getPackage()
  {
		return XModelPackage.eINSTANCE;
	}

} //XModelFactoryImpl
