/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.xmodel.xModel.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.xmodel.xModel.Operation;
import org.xtext.example.xmodel.xModel.Property;
import org.xtext.example.xmodel.xModel.XClass;
import org.xtext.example.xmodel.xModel.XModelPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XClass</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.xmodel.xModel.impl.XClassImpl#isIsAbstract <em>Is Abstract</em>}</li>
 *   <li>{@link org.xtext.example.xmodel.xModel.impl.XClassImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.xmodel.xModel.impl.XClassImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.xtext.example.xmodel.xModel.impl.XClassImpl#getExtend <em>Extend</em>}</li>
 *   <li>{@link org.xtext.example.xmodel.xModel.impl.XClassImpl#getProperty <em>Property</em>}</li>
 *   <li>{@link org.xtext.example.xmodel.xModel.impl.XClassImpl#getOperation <em>Operation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XClassImpl extends MinimalEObjectImpl.Container implements XClass
{
  /**
	 * The default value of the '{@link #isIsAbstract() <em>Is Abstract</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isIsAbstract()
	 * @generated
	 * @ordered
	 */
  protected static final boolean IS_ABSTRACT_EDEFAULT = false;

  /**
	 * The cached value of the '{@link #isIsAbstract() <em>Is Abstract</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #isIsAbstract()
	 * @generated
	 * @ordered
	 */
  protected boolean isAbstract = IS_ABSTRACT_EDEFAULT;

  /**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
  protected static final String NAME_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
  protected String name = NAME_EDEFAULT;

  /**
	 * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDescription()
	 * @generated
	 * @ordered
	 */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDescription()
	 * @generated
	 * @ordered
	 */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
	 * The default value of the '{@link #getExtend() <em>Extend</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getExtend()
	 * @generated
	 * @ordered
	 */
  protected static final String EXTEND_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getExtend() <em>Extend</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getExtend()
	 * @generated
	 * @ordered
	 */
  protected String extend = EXTEND_EDEFAULT;

  /**
	 * The cached value of the '{@link #getProperty() <em>Property</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getProperty()
	 * @generated
	 * @ordered
	 */
  protected EList<Property> property;

  /**
	 * The cached value of the '{@link #getOperation() <em>Operation</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getOperation()
	 * @generated
	 * @ordered
	 */
  protected EList<Operation> operation;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected XClassImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return XModelPackage.Literals.XCLASS;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean isIsAbstract()
  {
		return isAbstract;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setIsAbstract(boolean newIsAbstract)
  {
		boolean oldIsAbstract = isAbstract;
		isAbstract = newIsAbstract;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, XModelPackage.XCLASS__IS_ABSTRACT, oldIsAbstract, isAbstract));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getName()
  {
		return name;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setName(String newName)
  {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, XModelPackage.XCLASS__NAME, oldName, name));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getDescription()
  {
		return description;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setDescription(String newDescription)
  {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, XModelPackage.XCLASS__DESCRIPTION, oldDescription, description));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getExtend()
  {
		return extend;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setExtend(String newExtend)
  {
		String oldExtend = extend;
		extend = newExtend;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, XModelPackage.XCLASS__EXTEND, oldExtend, extend));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<Property> getProperty()
  {
		if (property == null) {
			property = new EObjectContainmentEList<Property>(Property.class, this, XModelPackage.XCLASS__PROPERTY);
		}
		return property;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<Operation> getOperation()
  {
		if (operation == null) {
			operation = new EObjectContainmentEList<Operation>(Operation.class, this, XModelPackage.XCLASS__OPERATION);
		}
		return operation;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case XModelPackage.XCLASS__PROPERTY:
				return ((InternalEList<?>)getProperty()).basicRemove(otherEnd, msgs);
			case XModelPackage.XCLASS__OPERATION:
				return ((InternalEList<?>)getOperation()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case XModelPackage.XCLASS__IS_ABSTRACT:
				return isIsAbstract();
			case XModelPackage.XCLASS__NAME:
				return getName();
			case XModelPackage.XCLASS__DESCRIPTION:
				return getDescription();
			case XModelPackage.XCLASS__EXTEND:
				return getExtend();
			case XModelPackage.XCLASS__PROPERTY:
				return getProperty();
			case XModelPackage.XCLASS__OPERATION:
				return getOperation();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case XModelPackage.XCLASS__IS_ABSTRACT:
				setIsAbstract((Boolean)newValue);
				return;
			case XModelPackage.XCLASS__NAME:
				setName((String)newValue);
				return;
			case XModelPackage.XCLASS__DESCRIPTION:
				setDescription((String)newValue);
				return;
			case XModelPackage.XCLASS__EXTEND:
				setExtend((String)newValue);
				return;
			case XModelPackage.XCLASS__PROPERTY:
				getProperty().clear();
				getProperty().addAll((Collection<? extends Property>)newValue);
				return;
			case XModelPackage.XCLASS__OPERATION:
				getOperation().clear();
				getOperation().addAll((Collection<? extends Operation>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case XModelPackage.XCLASS__IS_ABSTRACT:
				setIsAbstract(IS_ABSTRACT_EDEFAULT);
				return;
			case XModelPackage.XCLASS__NAME:
				setName(NAME_EDEFAULT);
				return;
			case XModelPackage.XCLASS__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
			case XModelPackage.XCLASS__EXTEND:
				setExtend(EXTEND_EDEFAULT);
				return;
			case XModelPackage.XCLASS__PROPERTY:
				getProperty().clear();
				return;
			case XModelPackage.XCLASS__OPERATION:
				getOperation().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case XModelPackage.XCLASS__IS_ABSTRACT:
				return isAbstract != IS_ABSTRACT_EDEFAULT;
			case XModelPackage.XCLASS__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case XModelPackage.XCLASS__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
			case XModelPackage.XCLASS__EXTEND:
				return EXTEND_EDEFAULT == null ? extend != null : !EXTEND_EDEFAULT.equals(extend);
			case XModelPackage.XCLASS__PROPERTY:
				return property != null && !property.isEmpty();
			case XModelPackage.XCLASS__OPERATION:
				return operation != null && !operation.isEmpty();
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (isAbstract: ");
		result.append(isAbstract);
		result.append(", name: ");
		result.append(name);
		result.append(", description: ");
		result.append(description);
		result.append(", extend: ");
		result.append(extend);
		result.append(')');
		return result.toString();
	}

} //XClassImpl
