/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.xmodel.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.xmodel.xModel.Operation;
import org.xtext.example.xmodel.xModel.Parameter;
import org.xtext.example.xmodel.xModel.Property;
import org.xtext.example.xmodel.xModel.Visibility;
import org.xtext.example.xmodel.xModel.XClass;
import org.xtext.example.xmodel.xModel.XType;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class XModelGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<XClass> _filter = Iterables.<XClass>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), XClass.class);
    for (final XClass e : _filter) {
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(e).toString("/");
      String _plus = (_string + ".java");
      fsa.generateFile(_plus, this.compile(e));
    }
  }
  
  private CharSequence compile(final XClass e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(e.eContainer());
      boolean _tripleNotEquals = (_fullyQualifiedName != null);
      if (_tripleNotEquals) {
        _builder.append("package ");
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e.eContainer());
        _builder.append(_fullyQualifiedName_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("public ");
    {
      boolean _isIsAbstract = e.isIsAbstract();
      boolean _equals = (_isIsAbstract == true);
      if (_equals) {
        _builder.append("abstract ");
      }
    }
    _builder.append("class ");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append(" ");
    {
      String _extend = e.getExtend();
      boolean _tripleNotEquals_1 = (_extend != null);
      if (_tripleNotEquals_1) {
        _builder.append("extends ");
        String _extend_1 = e.getExtend();
        _builder.append(_extend_1);
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      String _description = e.getDescription();
      boolean _tripleNotEquals_2 = (_description != null);
      if (_tripleNotEquals_2) {
        _builder.append("    //  ");
        String _description_1 = e.getDescription();
        _builder.append(_description_1);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Property> _property = e.getProperty();
      for(final Property f : _property) {
        _builder.append("    ");
        CharSequence _compilePro = this.compilePro(f);
        _builder.append(_compilePro, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.newLine();
    {
      EList<Operation> _operation = e.getOperation();
      for(final Operation f_1 : _operation) {
        _builder.append("    ");
        CharSequence _compileOp = this.compileOp(f_1);
        _builder.append(_compileOp, "    ");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compilePro(final Property f) {
    StringConcatenation _builder = new StringConcatenation();
    Visibility _visibility = f.getVisibility();
    _builder.append(_visibility);
    _builder.append(" ");
    XType _xtype = f.getXtype();
    _builder.append(_xtype);
    _builder.append(" ");
    String _name = f.getName();
    _builder.append(_name);
    _builder.append(";");
    {
      String _description = f.getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("  //  ");
        String _description_1 = f.getDescription();
        _builder.append(_description_1);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("public ");
    XType _xtype_1 = f.getXtype();
    _builder.append(_xtype_1);
    _builder.append(" get");
    String _firstUpper = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("return ");
    String _name_1 = f.getName();
    _builder.append(_name_1, "    ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("public void set");
    String _firstUpper_1 = StringExtensions.toFirstUpper(f.getName());
    _builder.append(_firstUpper_1);
    _builder.append("(");
    XType _xtype_2 = f.getXtype();
    _builder.append(_xtype_2);
    _builder.append(" ");
    String _name_2 = f.getName();
    _builder.append(_name_2);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("this.");
    String _name_3 = f.getName();
    _builder.append(_name_3, "    ");
    _builder.append(" = ");
    String _name_4 = f.getName();
    _builder.append(_name_4, "    ");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compileOp(final Operation f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _description = f.getDescription();
      boolean _tripleNotEquals = (_description != null);
      if (_tripleNotEquals) {
        _builder.append("//  ");
        String _description_1 = f.getDescription();
        _builder.append(_description_1);
      }
    }
    _builder.newLineIfNotEmpty();
    Visibility _visibility = f.getVisibility();
    _builder.append(_visibility);
    _builder.append(" ");
    XType _xtype = f.getXtype();
    _builder.append(_xtype);
    _builder.append(" ");
    String _name = f.getName();
    _builder.append(_name);
    _builder.append("(");
    {
      EList<Parameter> _parameter = f.getParameter();
      for(final Parameter f1 : _parameter) {
        {
          Parameter _last = IterableExtensions.<Parameter>last(f.getParameter());
          boolean _notEquals = (!Objects.equal(_last, f1));
          if (_notEquals) {
            CharSequence _compilePa = this.compilePa(f1);
            _builder.append(_compilePa);
            _builder.append(",");
          }
        }
        {
          Parameter _last_1 = IterableExtensions.<Parameter>last(f.getParameter());
          boolean _equals = Objects.equal(_last_1, f1);
          if (_equals) {
            CharSequence _compilePa_1 = this.compilePa(f1);
            _builder.append(_compilePa_1);
          }
        }
      }
    }
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("// to do");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compilePa(final Parameter f) {
    StringConcatenation _builder = new StringConcatenation();
    XType _xtype = f.getXtype();
    _builder.append(_xtype);
    _builder.append(" ");
    String _name = f.getName();
    _builder.append(_name);
    return _builder;
  }
}
