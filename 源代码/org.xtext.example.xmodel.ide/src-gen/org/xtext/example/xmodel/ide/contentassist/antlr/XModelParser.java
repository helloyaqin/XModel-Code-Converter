/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.example.xmodel.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.xmodel.ide.contentassist.antlr.internal.InternalXModelParser;
import org.xtext.example.xmodel.services.XModelGrammarAccess;

public class XModelParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XModelGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XModelGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
			builder.put(grammarAccess.getXTypeAccess().getAlternatives(), "rule__XType__Alternatives");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup_4(), "rule__Package__Group_4__0");
			builder.put(grammarAccess.getPackageAccess().getGroup_4_3(), "rule__Package__Group_4_3__0");
			builder.put(grammarAccess.getXClassAccess().getGroup(), "rule__XClass__Group__0");
			builder.put(grammarAccess.getXClassAccess().getGroup_5(), "rule__XClass__Group_5__0");
			builder.put(grammarAccess.getXClassAccess().getGroup_6(), "rule__XClass__Group_6__0");
			builder.put(grammarAccess.getXClassAccess().getGroup_7(), "rule__XClass__Group_7__0");
			builder.put(grammarAccess.getXClassAccess().getGroup_7_3(), "rule__XClass__Group_7_3__0");
			builder.put(grammarAccess.getXClassAccess().getGroup_8(), "rule__XClass__Group_8__0");
			builder.put(grammarAccess.getXClassAccess().getGroup_8_3(), "rule__XClass__Group_8_3__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_4(), "rule__Property__Group_4__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_5(), "rule__Property__Group_5__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup_6(), "rule__Property__Group_6__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_4(), "rule__Operation__Group_4__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_5(), "rule__Operation__Group_5__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_6(), "rule__Operation__Group_6__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_7(), "rule__Operation__Group_7__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_7_3(), "rule__Operation__Group_7_3__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_4(), "rule__Parameter__Group_4__0");
			builder.put(grammarAccess.getPackageAccess().getNameAssignment_2(), "rule__Package__NameAssignment_2");
			builder.put(grammarAccess.getPackageAccess().getClassAssignment_4_2(), "rule__Package__ClassAssignment_4_2");
			builder.put(grammarAccess.getPackageAccess().getClassAssignment_4_3_1(), "rule__Package__ClassAssignment_4_3_1");
			builder.put(grammarAccess.getXClassAccess().getIsAbstractAssignment_1(), "rule__XClass__IsAbstractAssignment_1");
			builder.put(grammarAccess.getXClassAccess().getNameAssignment_3(), "rule__XClass__NameAssignment_3");
			builder.put(grammarAccess.getXClassAccess().getDescriptionAssignment_5_1(), "rule__XClass__DescriptionAssignment_5_1");
			builder.put(grammarAccess.getXClassAccess().getExtendAssignment_6_1(), "rule__XClass__ExtendAssignment_6_1");
			builder.put(grammarAccess.getXClassAccess().getPropertyAssignment_7_2(), "rule__XClass__PropertyAssignment_7_2");
			builder.put(grammarAccess.getXClassAccess().getPropertyAssignment_7_3_1(), "rule__XClass__PropertyAssignment_7_3_1");
			builder.put(grammarAccess.getXClassAccess().getOperationAssignment_8_2(), "rule__XClass__OperationAssignment_8_2");
			builder.put(grammarAccess.getXClassAccess().getOperationAssignment_8_3_1(), "rule__XClass__OperationAssignment_8_3_1");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_2(), "rule__Property__NameAssignment_2");
			builder.put(grammarAccess.getPropertyAccess().getDescriptionAssignment_4_1(), "rule__Property__DescriptionAssignment_4_1");
			builder.put(grammarAccess.getPropertyAccess().getVisibilityAssignment_5_1(), "rule__Property__VisibilityAssignment_5_1");
			builder.put(grammarAccess.getPropertyAccess().getXtypeAssignment_6_1(), "rule__Property__XtypeAssignment_6_1");
			builder.put(grammarAccess.getOperationAccess().getNameAssignment_2(), "rule__Operation__NameAssignment_2");
			builder.put(grammarAccess.getOperationAccess().getDescriptionAssignment_4_1(), "rule__Operation__DescriptionAssignment_4_1");
			builder.put(grammarAccess.getOperationAccess().getVisibilityAssignment_5_1(), "rule__Operation__VisibilityAssignment_5_1");
			builder.put(grammarAccess.getOperationAccess().getXtypeAssignment_6_1(), "rule__Operation__XtypeAssignment_6_1");
			builder.put(grammarAccess.getOperationAccess().getParameterAssignment_7_2(), "rule__Operation__ParameterAssignment_7_2");
			builder.put(grammarAccess.getOperationAccess().getParameterAssignment_7_3_1(), "rule__Operation__ParameterAssignment_7_3_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_2(), "rule__Parameter__NameAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getXtypeAssignment_4_1(), "rule__Parameter__XtypeAssignment_4_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XModelGrammarAccess grammarAccess;

	@Override
	protected InternalXModelParser createParser() {
		InternalXModelParser result = new InternalXModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
